name: CD
run-name: "CD run by @${{ github.actor }}, event: ${{ github.event_name }}"
on:
    workflow_call:
    workflow_dispatch:
concurrency:
    group: cd ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true
jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: production
        outputs:
          alb_dns: ${{ steps.alb_dns.outputs.alb_dns }}
        steps:
            - uses: actions/checkout@v4
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-2
            - name: Deploy to AWS
              run: |
                  terraform init
                  terraform destroy \
                    -var="container_image=${{ secrets.ECR_REGISTRY }}:${{ github.sha }}" \
                    -auto-approve && \
                  terraform apply \
                    -var="container_image=${{ secrets.ECR_REGISTRY }}:${{ github.sha }}" \
                    -auto-approve
              working-directory: terraform/environments/dev
            - name: Get ALB DNS Name
              id: alb_dns
              run: |
                  echo "alb_dns=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
              working-directory: terraform/environments/dev
    wait_for_deployment:
      needs: deploy
      runs-on: ubuntu-latest
      environment: production
      steps:
        - name: Wait for service to be ready
          env:
              APP_HOST: http://${{ needs.deploy.outputs.alb_dns }}
              APP_HOST_PORT: 80
          uses: nev7n/wait_for_response@v1
          with:
            url: "${{ env.APP_HOST }}:${{ env.APP_HOST_PORT }}"
            responseCode: 200
            timeout: 300000
            interval: 10000
    user_flows:
        needs: [deploy, wait_for_deployment]
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Set up Ruby
              uses: ruby/setup-ruby@v1
              with:
                  ruby-version: '3.3.5'
                  bundler-cache: true
            - name: Install dependencies
              env:
                GITHUB_USERNAME: ${{ vars.ENV_GITHUB_USERNAME }}
                GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_PERSONAL_ACCESS_TOKEN }}
              run: |
                gem install bundler
                bundle install --with test
              working-directory: src
            - name: Install Google Chrome
              run: |
                wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install google-chrome-stable
            - name: Install ChromeDriver
              run: |
                CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
                wget -N https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip

                unzip chromedriver-linux64.zip
                sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
                rm chromedriver-linux64.zip
            - name: Set up virtual display
              run: |
                  sudo apt-get install -y xvfb
                  export DISPLAY=:99
                  Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
            - name: Install & start UPower
              run: |
                  sudo apt-get install -y upower
                  sudo systemctl start upower
            - name: Clean up any previously running Chrome processes
              run: |
                  pkill -f chrome || true
                  sleep 2
            - name: Test User Flows against deployment
              env:
                  APP_HOST: http://${{ needs.deploy.outputs.alb_dns }}
                  APP_HOST_PORT: 80
              run: |
                  echo "Running User flows pointing at ${APP_HOST}:${APP_HOST_PORT}"
                  xvfb-run --auto-servernum bundle exec cucumber features
              working-directory: src/test/user_flows